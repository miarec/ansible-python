---
- name: Check python signing key for the requested version {{ python_version_base }}
  fail:
    msg: >
      There is no GPG key id defined for version {{ python_version_base }} in
      vars/main.yml. Set python_gpg_key_id manually or submit a PR to add this
      version.
  when:
    - python_verify_gpg_signature|bool
    - python_gpg_key_id is not defined
    - python_version_base not in python_gpg_keys


- name: Set python signing key for version {{ python_version_base }}
  set_fact:
    python_gpg_key_id: "{{ python_gpg_keys[python_version_base] }}"
  when:
    - python_verify_gpg_signature|bool
    - python_gpg_key_id is not defined
    - python_version_base in python_gpg_keys


- name: Check if python signing key is imported to GPG (ignore errors)
  command: gpg --fingerprint {{ python_gpg_key_id }}
  register: gpg_key_imported
  failed_when: false
  ignore_errors: true
  when:
    - python_verify_gpg_signature|bool


- name: Copy python signing key
  copy:
    src: "files/{{ python_gpg_key_id }}.key"
    dest: "{{ python_download_dir }}/{{ python_gpg_key_id }}.key"


- name: Import python signing key into GPG
  command: "gpg --import {{ python_download_dir }}/{{ python_gpg_key_id }}.key"
  when:
    - python_verify_gpg_signature|bool
    - gpg_key_imported.rc != 0


- name: Download python source code
  get_url:
    url: "{{ python_download_url }}"
    dest: "{{ python_src_pkg_path }}"


- name: Download python tarbal signature
  get_url:
    url: "{{ python_download_url }}.asc"
    dest: "{{ python_src_pkg_path }}.asc"
  when:
    - python_verify_gpg_signature|bool


- name: Verify signature of the python tarball
  command: gpg --verify {{ python_src_pkg_path }}.asc {{ python_src_pkg_path }}
  register: signature_verified
  when:
    - python_verify_gpg_signature|bool

- name: Assert that the tarball signature is verified
  assert:
    that: "signature_verified.rc == 0"
  when:
    - python_verify_gpg_signature|bool


- name: Untar the source package
  unarchive:
    src: "{{ python_src_pkg_path }}"
    dest: "{{ python_download_dir }}"
    creates: "{{ python_src_dir_path }}/configure"
    copy: false

- name: Run configure (Debian)
  command: ./configure --enable-optimizations --enable-shared --prefix={{ python_install_dir }}
  args:
    chdir: "{{ python_src_dir_path }}"
    creates: "{{ python_src_dir_path }}/Makefile"
  environment:
    LDFLAGS: "-Wl,-rpath {{ python_install_dir}}/lib"
  when: 
    - ansible_os_family == "Debian"

# TODO: right now, only version 7 of RedHat/Centos is supported
# In future, update this code to support release 8+
- name: Run configure (RedHat, Python 3.10+)
  block:
    - name: Get openssl11 location
      shell: pkg-config --cflags openssl11
      register: openssl11_cflags

    - name: Get openssl11 location
      shell: pkg-config --libs openssl11
      register: openssl11_libs

    # Note, on Centos 7, due to old version of GCC, we cannot use --enable-optimizations option
    # TODO: try to install devtoolset-11-gcc* and compile with a newer GCC
    - name: Run configure
      command: ./configure --enable-shared --prefix={{ python_install_dir }}
      args:
        chdir: "{{ python_src_dir_path }}"
        creates: "{{ python_src_dir_path }}/Makefile"

      environment:
        CPPFLAGS: "{{ openssl11_cflags.stdout }}"
        LDFLAGS: "{{ openssl11_libs.stdout }} -Wl,-rpath {{ python_install_dir}}/lib"
      
  when: 
    - ansible_os_family == "RedHat"
    - python_version is version('3.10', '>=')
    # - ansible_distribution_major_version is version('7', '<=')
      
- name: Run configure (RedHat, Python 3.9 and older)
  command: ./configure --enable-shared --prefix={{ python_install_dir }}
  args:
    chdir: "{{ python_src_dir_path }}"
    creates: "{{ python_src_dir_path }}/Makefile"
  environment:
    LDFLAGS: "-Wl,-rpath {{ python_install_dir}}/lib"
  when:
    - ansible_os_family == "RedHat"
    - python_version is version('3.9', '<=')
    # - (ansible_distribution_major_version is version('7', '>') or python_version is version('3.9', '<='))


- name: Run make
  command: make -j{{ ansible_processor_cores }}
  args:
    chdir: "{{ python_src_dir_path }}"
    creates: "{{ python_src_dir_path }}/python"


- name: Run make altinstall
  command: make altinstall
  args:
    chdir: "{{ python_src_dir_path }}"
    creates: "{{ python_install_dir }}/bin/{{ python_exec }}"
  when: not python_force_install|bool
  notify:
    - reload ldconfig
  become: true


- name: Run make altinstall | Force
  command: make altinstall
  args:
    chdir: "{{ python_src_dir_path }}"
  when: python_force_install|bool
  notify:
    - reload ldconfig
  become: true


- name: Add {{ python_install_dir }}/lib directory to ld.so.conf
  lineinfile: dest=/etc/ld.so.conf line='{{ python_install_dir }}/lib'
  notify:
    - reload ldconfig
  become: true

- name: Clean up the source files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ python_src_pkg_path }}"
    - "{{ python_src_pkg_path }}.asc"
    - "{{ python_src_dir_path }}"
  # ignore_errors: true
  when: python_cleanup_downloads|bool
  become: true
